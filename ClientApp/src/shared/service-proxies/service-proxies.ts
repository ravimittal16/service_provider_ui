/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.0.0 (NJsonSchema v10.1.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AccountServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: AuthenticateModel | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/Account/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResultModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModel>(<any>null);
    }

    /**
     * @param externalLoginId (optional) 
     * @param userEmail (optional) 
     * @return Success
     */
    externalLogin(externalLoginId: string | null | undefined, userEmail: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/ExternalLogin?";
        if (externalLoginId !== undefined && externalLoginId !== null)
            url_ += "externalLoginId=" + encodeURIComponent("" + externalLoginId) + "&";
        if (userEmail !== undefined && userEmail !== null)
            url_ += "userEmail=" + encodeURIComponent("" + userEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalLogin(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processExternalLogin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterModel | undefined): Observable<RegisterModelGenericResponse> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<RegisterModelGenericResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterModelGenericResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterModelGenericResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterModelGenericResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterModelGenericResponse>(<any>null);
    }

    /**
     * @return Success
     */
    intuitSignIn(): Observable<void> {
        let url_ = this.baseUrl + "/api/Account/IntuitSignIn";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIntuitSignIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIntuitSignIn(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processIntuitSignIn(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param signupKey (optional) 
     * @return Success
     */
    getExternalSignupModel(signupKey: string | null | undefined): Observable<RegisterModelGenericResponse> {
        let url_ = this.baseUrl + "/api/Account/GetExternalSignupModel?";
        if (signupKey !== undefined && signupKey !== null)
            url_ += "signupKey=" + encodeURIComponent("" + signupKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExternalSignupModel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExternalSignupModel(<any>response_);
                } catch (e) {
                    return <Observable<RegisterModelGenericResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterModelGenericResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetExternalSignupModel(response: HttpResponseBase): Observable<RegisterModelGenericResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterModelGenericResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterModelGenericResponse>(<any>null);
    }
}

@Injectable()
export class CustomersServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param companyId (optional) 
     * @param body (optional) 
     * @return Success
     */
    createCustomer(companyId: number | undefined, body: CreateCustomerModel | undefined): Observable<CreateCustomerModelGenericResponse> {
        let url_ = this.baseUrl + "/api/Customers/CreateCustomer?";
        if (companyId === null)
            throw new Error("The parameter 'companyId' cannot be null.");
        else if (companyId !== undefined)
            url_ += "companyId=" + encodeURIComponent("" + companyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCustomer(<any>response_);
                } catch (e) {
                    return <Observable<CreateCustomerModelGenericResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateCustomerModelGenericResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCustomer(response: HttpResponseBase): Observable<CreateCustomerModelGenericResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateCustomerModelGenericResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateCustomerModelGenericResponse>(<any>null);
    }

    /**
     * @return Success
     */
    importCustomers(): Observable<DataImportResponseModel[]> {
        let url_ = this.baseUrl + "/api/Customers/ImportCustomers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImportCustomers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImportCustomers(<any>response_);
                } catch (e) {
                    return <Observable<DataImportResponseModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DataImportResponseModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processImportCustomers(response: HttpResponseBase): Observable<DataImportResponseModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(DataImportResponseModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DataImportResponseModel[]>(<any>null);
    }

    /**
     * @return Success
     */
    getAllCustomers(): Observable<CustomerDto[]> {
        let url_ = this.baseUrl + "/api/Customers/GetAllCustomers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCustomers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCustomers(<any>response_);
                } catch (e) {
                    return <Observable<CustomerDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CustomerDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllCustomers(response: HttpResponseBase): Observable<CustomerDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(CustomerDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CustomerDto[]>(<any>null);
    }
}

@Injectable()
export class WeatherForecastServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    get(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[]>(<any>null);
    }
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string | undefined;
    password: string | undefined;
    rememberClient: boolean;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"];
            this.password = _data["password"];
            this.rememberClient = _data["rememberClient"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["rememberClient"] = this.rememberClient;
        return data; 
    }

    clone(): AuthenticateModel {
        const json = this.toJSON();
        let result = new AuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string | undefined;
    password: string | undefined;
    rememberClient: boolean;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: string | undefined;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.encryptedAccessToken = _data["encryptedAccessToken"];
            this.expireInSeconds = _data["expireInSeconds"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data; 
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number;
    userId: string | undefined;
}

export class RegisterModel implements IRegisterModel {
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    password: string | undefined;
    confirmPassword: string | undefined;
    companyName: string | undefined;
    phoneNumber: string | undefined;
    externalSignupId: string | undefined;
    externalLoginKey: string | undefined;

    constructor(data?: IRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.fullName = _data["fullName"];
            this.emailAddress = _data["emailAddress"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.companyName = _data["companyName"];
            this.phoneNumber = _data["phoneNumber"];
            this.externalSignupId = _data["externalSignupId"];
            this.externalLoginKey = _data["externalLoginKey"];
        }
    }

    static fromJS(data: any): RegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["companyName"] = this.companyName;
        data["phoneNumber"] = this.phoneNumber;
        data["externalSignupId"] = this.externalSignupId;
        data["externalLoginKey"] = this.externalLoginKey;
        return data; 
    }

    clone(): RegisterModel {
        const json = this.toJSON();
        let result = new RegisterModel();
        result.init(json);
        return result;
    }
}

export interface IRegisterModel {
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    password: string | undefined;
    confirmPassword: string | undefined;
    companyName: string | undefined;
    phoneNumber: string | undefined;
    externalSignupId: string | undefined;
    externalLoginKey: string | undefined;
}

export enum ErrorTypes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class RegisterModelGenericResponse implements IRegisterModelGenericResponse {
    httpStatusCode: number;
    readonly hasError: boolean;
    isSuccess: boolean;
    entity: RegisterModel;
    errors: string[] | undefined;
    errorType: ErrorTypes;

    constructor(data?: IRegisterModelGenericResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            (<any>this).hasError = _data["hasError"];
            this.isSuccess = _data["isSuccess"];
            this.entity = _data["entity"] ? RegisterModel.fromJS(_data["entity"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors.push(item);
            }
            this.errorType = _data["errorType"];
        }
    }

    static fromJS(data: any): RegisterModelGenericResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModelGenericResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["hasError"] = this.hasError;
        data["isSuccess"] = this.isSuccess;
        data["entity"] = this.entity ? this.entity.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["errorType"] = this.errorType;
        return data; 
    }

    clone(): RegisterModelGenericResponse {
        const json = this.toJSON();
        let result = new RegisterModelGenericResponse();
        result.init(json);
        return result;
    }
}

export interface IRegisterModelGenericResponse {
    httpStatusCode: number;
    hasError: boolean;
    isSuccess: boolean;
    entity: RegisterModel;
    errors: string[] | undefined;
    errorType: ErrorTypes;
}

export enum PropertyTypes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export class AddressDto implements IAddressDto {
    propertyType: PropertyTypes;
    propertyName: string | undefined;
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    countrySubDivisionCode: string | undefined;
    country: string | undefined;
    postalCode: string | undefined;
    latitude: number | undefined;
    longitude: number | undefined;
    isPrimary: boolean | undefined;

    constructor(data?: IAddressDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyType = _data["propertyType"];
            this.propertyName = _data["propertyName"];
            this.addressLine1 = _data["addressLine1"];
            this.addressLine2 = _data["addressLine2"];
            this.city = _data["city"];
            this.countrySubDivisionCode = _data["countrySubDivisionCode"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.isPrimary = _data["isPrimary"];
        }
    }

    static fromJS(data: any): AddressDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyType"] = this.propertyType;
        data["propertyName"] = this.propertyName;
        data["addressLine1"] = this.addressLine1;
        data["addressLine2"] = this.addressLine2;
        data["city"] = this.city;
        data["countrySubDivisionCode"] = this.countrySubDivisionCode;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["isPrimary"] = this.isPrimary;
        return data; 
    }

    clone(): AddressDto {
        const json = this.toJSON();
        let result = new AddressDto();
        result.init(json);
        return result;
    }
}

export interface IAddressDto {
    propertyType: PropertyTypes;
    propertyName: string | undefined;
    addressLine1: string | undefined;
    addressLine2: string | undefined;
    city: string | undefined;
    countrySubDivisionCode: string | undefined;
    country: string | undefined;
    postalCode: string | undefined;
    latitude: number | undefined;
    longitude: number | undefined;
    isPrimary: boolean | undefined;
}

export class CreateCustomerModel implements ICreateCustomerModel {
    displayName: string | undefined;
    givenName: string | undefined;
    middleName: string | undefined;
    suffix: string | undefined;
    familyName: string | undefined;
    title: string | undefined;
    primaryEmailAddr: string | undefined;
    mobile: string | undefined;
    primaryPhone: string | undefined;
    fax: string | undefined;
    companyName: string | undefined;
    businessAddress: AddressDto;
    shippingAddress: AddressDto;

    constructor(data?: ICreateCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.givenName = _data["givenName"];
            this.middleName = _data["middleName"];
            this.suffix = _data["suffix"];
            this.familyName = _data["familyName"];
            this.title = _data["title"];
            this.primaryEmailAddr = _data["primaryEmailAddr"];
            this.mobile = _data["mobile"];
            this.primaryPhone = _data["primaryPhone"];
            this.fax = _data["fax"];
            this.companyName = _data["companyName"];
            this.businessAddress = _data["businessAddress"] ? AddressDto.fromJS(_data["businessAddress"]) : <any>undefined;
            this.shippingAddress = _data["shippingAddress"] ? AddressDto.fromJS(_data["shippingAddress"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["givenName"] = this.givenName;
        data["middleName"] = this.middleName;
        data["suffix"] = this.suffix;
        data["familyName"] = this.familyName;
        data["title"] = this.title;
        data["primaryEmailAddr"] = this.primaryEmailAddr;
        data["mobile"] = this.mobile;
        data["primaryPhone"] = this.primaryPhone;
        data["fax"] = this.fax;
        data["companyName"] = this.companyName;
        data["businessAddress"] = this.businessAddress ? this.businessAddress.toJSON() : <any>undefined;
        data["shippingAddress"] = this.shippingAddress ? this.shippingAddress.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateCustomerModel {
        const json = this.toJSON();
        let result = new CreateCustomerModel();
        result.init(json);
        return result;
    }
}

export interface ICreateCustomerModel {
    displayName: string | undefined;
    givenName: string | undefined;
    middleName: string | undefined;
    suffix: string | undefined;
    familyName: string | undefined;
    title: string | undefined;
    primaryEmailAddr: string | undefined;
    mobile: string | undefined;
    primaryPhone: string | undefined;
    fax: string | undefined;
    companyName: string | undefined;
    businessAddress: AddressDto;
    shippingAddress: AddressDto;
}

export class CreateCustomerModelGenericResponse implements ICreateCustomerModelGenericResponse {
    httpStatusCode: number;
    readonly hasError: boolean;
    isSuccess: boolean;
    entity: CreateCustomerModel;
    errors: string[] | undefined;
    errorType: ErrorTypes;

    constructor(data?: ICreateCustomerModelGenericResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpStatusCode = _data["httpStatusCode"];
            (<any>this).hasError = _data["hasError"];
            this.isSuccess = _data["isSuccess"];
            this.entity = _data["entity"] ? CreateCustomerModel.fromJS(_data["entity"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors.push(item);
            }
            this.errorType = _data["errorType"];
        }
    }

    static fromJS(data: any): CreateCustomerModelGenericResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerModelGenericResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpStatusCode"] = this.httpStatusCode;
        data["hasError"] = this.hasError;
        data["isSuccess"] = this.isSuccess;
        data["entity"] = this.entity ? this.entity.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        data["errorType"] = this.errorType;
        return data; 
    }

    clone(): CreateCustomerModelGenericResponse {
        const json = this.toJSON();
        let result = new CreateCustomerModelGenericResponse();
        result.init(json);
        return result;
    }
}

export interface ICreateCustomerModelGenericResponse {
    httpStatusCode: number;
    hasError: boolean;
    isSuccess: boolean;
    entity: CreateCustomerModel;
    errors: string[] | undefined;
    errorType: ErrorTypes;
}

export enum EntityTypes {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    __1 = -1,
}

export class DataImportResponseModel implements IDataImportResponseModel {
    companyId: number;
    totalImportedRecords: number;
    isSuccess: boolean | undefined;
    errors: string | undefined;
    entityType: EntityTypes;

    constructor(data?: IDataImportResponseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.companyId = _data["companyId"];
            this.totalImportedRecords = _data["totalImportedRecords"];
            this.isSuccess = _data["isSuccess"];
            this.errors = _data["errors"];
            this.entityType = _data["entityType"];
        }
    }

    static fromJS(data: any): DataImportResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new DataImportResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["companyId"] = this.companyId;
        data["totalImportedRecords"] = this.totalImportedRecords;
        data["isSuccess"] = this.isSuccess;
        data["errors"] = this.errors;
        data["entityType"] = this.entityType;
        return data; 
    }

    clone(): DataImportResponseModel {
        const json = this.toJSON();
        let result = new DataImportResponseModel();
        result.init(json);
        return result;
    }
}

export interface IDataImportResponseModel {
    companyId: number;
    totalImportedRecords: number;
    isSuccess: boolean | undefined;
    errors: string | undefined;
    entityType: EntityTypes;
}

export class CustomerDto implements ICustomerDto {
    id: number;
    displayName: string | undefined;
    fullName: string | undefined;
    companyName: string | undefined;
    primaryEmailAddr: string | undefined;
    mobile: string | undefined;
    primaryPhone: string | undefined;

    constructor(data?: ICustomerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.fullName = _data["fullName"];
            this.companyName = _data["companyName"];
            this.primaryEmailAddr = _data["primaryEmailAddr"];
            this.mobile = _data["mobile"];
            this.primaryPhone = _data["primaryPhone"];
        }
    }

    static fromJS(data: any): CustomerDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["fullName"] = this.fullName;
        data["companyName"] = this.companyName;
        data["primaryEmailAddr"] = this.primaryEmailAddr;
        data["mobile"] = this.mobile;
        data["primaryPhone"] = this.primaryPhone;
        return data; 
    }

    clone(): CustomerDto {
        const json = this.toJSON();
        let result = new CustomerDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerDto {
    id: number;
    displayName: string | undefined;
    fullName: string | undefined;
    companyName: string | undefined;
    primaryEmailAddr: string | undefined;
    mobile: string | undefined;
    primaryPhone: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date: moment.Moment;
    temperatureC: number;
    readonly temperatureF: number;
    summary: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }

    clone(): WeatherForecast {
        const json = this.toJSON();
        let result = new WeatherForecast();
        result.init(json);
        return result;
    }
}

export interface IWeatherForecast {
    date: moment.Moment;
    temperatureC: number;
    temperatureF: number;
    summary: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}